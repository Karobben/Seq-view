#!/usr/local/bin/python3.7

import argparse, os
import pandas as pd

#命令行输入参数处理

parser = argparse.ArgumentParser()
parser.add_argument('-i','-I','--input',help='The file you want to read')     #输入文件
parser.add_argument('-r','-R','--range',default='1,10',help='"head, all, or range (exp: 1,50)", The range of Seq you want to reading. Exp: print 1-4 reads: 1,4. default = 1,10')     #输入文件
parser.add_argument('-a','-A','--align',default='None',help='Align it or not. Exp: -a 70 --> show 70 base per line')
parser.add_argument('-f','-F','--format',default='None',help='-f fasta/fastq.')
parser.add_argument('-fq','-FQ','--fastqSpecial',default='Normal',help='-fq fasta/fastq.')
parser.add_argument('-c','-C','--color',default='N',help='-c C/N.')
#获取参数
args = parser.parse_args()
INPUT = args.input
RANGE = args.range
ALIGN = args.align
FORMAT = args.format
FqSpecial = args.fastqSpecial
Color_args = args.color

if RANGE == "all":
    RANGE = '1,1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'  #哈哈哈哈哈哈哈没错我就是来搞笑的哈哈哈哈
elif RANGE == "head":
    RANGE = '1,10'

RANGE_1 = int(str(RANGE).split(',')[0])
RANGE_2 = int(str(RANGE).split(',')[1])

####
from Bio import SeqIO

def Formate_fig(INPUT,format):
    '''
    Format figure out
    '''
    if format == "None":
        if int(os.popen('head '+INPUT+'|grep "^@" |wc -l').read().strip()) != 0:
            print('fastq')
            format = 'fastq'
        else:
            print('make sure it is fasta format.')
            format = 'fasta'
    return format

def Align_fig(INPUT,FORMAT,ALIGN):
    '''
    This function is based on the length of eache Seqs
    It Will give a "Yes" only if all sequences' lengths are equal
    '''
    Seq = []
    if ALIGN == 'None' and FORMAT == 'fasta':
        for seq_record in SeqIO.parse(INPUT, FORMAT):
            Seq += [len(seq_record.seq)]
    Num_seq = len(list(set(Seq)))
    print(Num_seq)
    if int(Num_seq) == 1:
        ALIGN = os.get_terminal_size()[0] - 10
    return ALIGN

Num = 0

def print_fasta(seq_record):
    print(">",seq_record.id,"length=",len(seq_record))
    print(color_full(seq_record.seq))
    #print(len(seq_record))

def Fq_Score_sample(Score):
    Score = Score.replace("[",'')
    Score = Score.replace("]",'')
    Sub_1= ''
    for i in Score.split(','):
        Sub_1 +=str(int(int(i)*8/60))+","
    Sub_1 = Sub_1.replace("0","A")
    Sub_1 = Sub_1.replace("1","B")
    Sub_1 = Sub_1.replace("2","C")
    Sub_1 = Sub_1.replace("3","D")
    Sub_1 = Sub_1.replace("4","E")
    Sub_1 = Sub_1.replace("5","F")
    Sub_1 = Sub_1.replace("6","G")
    Sub_1 = Sub_1.replace("7","H")
    Sub_1 = Sub_1.replace("8","I")
    #print(Sub_1)
    A =" "
    B =u"\u2581"
    C =u"\u2582"
    D =u"\u2583"
    E =u"\u2584"
    F =u"\u2585"
    G =u"\u2586"
    H =u"\u2587"
    I =u"\u2588"
    for i in Sub_1.split(',')[0:-1]:
        #print(i,end='')
        if i <= "C":
            print("\x1b[3;45;6m%s\x1b[0m"%(locals()[i]),end='')
        else:
            print(locals()[i],end='')
        #print("\x1b[3;45;6m%s\x1b[0m"%(i),end=',')

def print_fastq(seq_record):
    print()
    print("@",seq_record.id,"length=",len(seq_record))
    print(color_full(seq_record.seq))
    Fq_Score_sample(color_full(seq_record.letter_annotations["phred_quality"]))

def color_full(Seq):
    Seq = str(Seq)
    Seq = Seq.replace('A','\x1b[3;45;6mA\x1b[0m') #A
    Seq = Seq.replace('C','\x1b[3;46;6mC\x1b[0m') #C
    Seq = Seq.replace('G','\x1b[3;47;6mG\x1b[0m') #G
    Seq = Seq.replace('T','\x1b[3;43;6mT\x1b[0m') #T
    Seq = Seq.replace('U','\x1b[3;40;6mU\x1b[0m') #U
    Seq = Seq.replace('V','\x1b[3;41;6mV\x1b[0m') #V
    Seq = Seq.replace('L','\x1b[3;42;6mL\x1b[0m') #L
    Seq = Seq.replace('I','\x1b[3;44;6mI\x1b[0m') #I
    Seq = Seq.replace('F','\x1b[3;43;6mF\x1b[0m') #F
    Seq = Seq.replace('W','\x1b[3;34;6mW\x1b[0m') #W
    Seq = Seq.replace('Y','\x1b[3;35;6mY\x1b[0m') #Y
    Seq = Seq.replace('D','\x1b[3;36;6mD\x1b[0m') #D
    Seq = Seq.replace('N','\x1b[3;37;6mN\x1b[0m') #N
    Seq = Seq.replace('E','\x1b[3;101;6mE\x1b[0m') #E
    Seq = Seq.replace('K','\x1b[3;102;6mK\x1b[0m') #K
    Seq = Seq.replace('Q','\x1b[3;103;6mQ\x1b[0m') #Q
    Seq = Seq.replace('M','\x1b[3;104;6mM\x1b[0m') #M
    Seq = Seq.replace('S','\x1b[3;105;6mS\x1b[0m') #S
    Seq = Seq.replace('P','\x1b[3;106;6mP\x1b[0m') #P
    Seq = Seq.replace('H','\x1b[3;107;6mH\x1b[0m') #H
    Seq = Seq.replace('R','\x1b[3;97;6mR\x1b[0m') #R
    return Seq

def align_p_header(RANGE_1,RANGE_2,Num):
    if RANGE_1 <= Num <= RANGE_2:
        print("No.",Num," = >",seq_record.id)

def tures_num(RANGE_1,RANGE_2,INPUT,FORMAT):
    Num=0
    longist = 0
    for seq_record in SeqIO.parse(INPUT, FORMAT):
        Num += 1
        if Num > RANGE_2:
            break
        A=len(seq_record)
        if RANGE_1 <= Num <= RANGE_2:
            if int(A) > longist:
                    longist = A
    if longist/int(ALIGN) == int(longist/int(ALIGN)):
        line_N = int(longist/int(ALIGN)) +1
    else:
        line_N = int(longist/int(ALIGN)) +2

    return line_N

def Trinity(INPUT):

    B= pd.read_table(INPUT, header=None)
    for i in range(int(len(B)/4)):
        b = i*4
        c = b +2
        B.iloc[b] = "@"+str(i)
        B.iloc[c] = "+"+str(i)

    B.to_csv("tmp.fq", index=None,header=None,quotechar=" ")
    os.system("sed -i 's/ //g' tmp.fq")

#########################
#pre-prting
#Format figure
FORMAT = Formate_fig(INPUT,FORMAT)
#AAlignment figure
ALIGN = Align_fig(INPUT,FORMAT,ALIGN)
#########################

#########################
if FORMAT == 'fasta':
    if ALIGN == 'None':   #### Normal Printting
        for seq_record in SeqIO.parse(INPUT, FORMAT):
            Num += 1
            if RANGE_1 <= Num <= RANGE_2:
                print_fasta(seq_record)
    else:                   ### align printting
        for seq_record in SeqIO.parse(INPUT, FORMAT):
            Num += 1
            if Num > RANGE_2:
                break
            align_p_header(RANGE_1,RANGE_2,Num)  ### printting the header first
        #for turns_N in range(1,tures_num(INPUT)):
        for turns_N in range(1,tures_num(RANGE_1,RANGE_2,INPUT,FORMAT)):
            Num = 0
            Seq_L1 =[]
            for seq_record in SeqIO.parse(INPUT, FORMAT):
                Num += 1
                if Num > RANGE_2:
                    break
                if RANGE_1 <= Num <= RANGE_2:
                    #Seq_tmp = str(seq_record.seq)[0:70]
                    Seq_tmp = str(seq_record.seq)[(turns_N-1)*int(ALIGN):int(ALIGN)*turns_N]
                    Seq_L2 = list(Seq_tmp)
                    for i in range(len(Seq_L1)):
                        if Seq_L1[i] == Seq_L2[i]:
                            #Seq_L2[i] = "*"
                            AAAAAAA =1
                        elif Seq_L1[i] != Seq_L2[i] and Seq_L2[i] != "-":
                            Seq_L2[i] = '\x1b[3;45;6m'+Seq_L2[i]+'\x1b[0m'
                    Seq_tmp = "".join(Seq_L2)
                    if Color_args != "N":
                        Seq_p = "No."+str(Num)+"\t"+color_full(Seq_tmp)
                    else:
                        Seq_p = "No."+str(Num)+"\t"+Seq_tmp#color_full(Seq_tmp)
                    print(Seq_p)
                    if Num == 1:
                        Seq_L1= list(Seq_tmp)
                #print(Num,Seq_L2)
                    #print("T=",turns_N)
            print('')
        #print(tures_num(RANGE_1,RANGE_2,INPUT))
###########################
#########################
if FORMAT == 'fastq':
    if FqSpecial =='Normal':
        if ALIGN == 'None':   #### Normal Printting
            for seq_record in SeqIO.parse(INPUT, FORMAT):
                Num += 1
                if Num > RANGE_2:
                    break
                if RANGE_1 <= Num <= RANGE_2:
                    print_fastq(seq_record)
        else:                   ### align printting
            ALIGN = os.get_terminal_size()[0]
            for turns_N in range(1,tures_num(RANGE_1,RANGE_2,INPUT,FORMAT)):
                Num = 0
                for seq_record in SeqIO.parse(INPUT, FORMAT):
                    Num += 1
                    if Num > RANGE_2:
                        break
                    if RANGE_1 <= Num <= RANGE_2:
                        #Seq_tmp = str(seq_record.seq)[0:70]
                        Seq_tmp = str(seq_record.seq)[(turns_N-1)*int(ALIGN):int(ALIGN)*turns_N]
                        print(color_full(Seq_tmp))
                        #print("T=",turns_N)
                print('')
            #print(tures_num(RANGE_1,RANGE_2,INPUT))
    elif FqSpecial != 'Normal':
            for seq_record in SeqIO.parse(INPUT, FORMAT):
                Num += 1
                if Num > RANGE_2:
                    break
                if RANGE_1 <= Num <= RANGE_2:
                    Fq_Score_sample(color_full(seq_record.letter_annotations["phred_quality"]))
                    print()

print(FORMAT)
